properties([
        buildDiscarder(logRotator(artifactDaysToKeepStr: '7',daysToKeepStr: '14')),
        parameters([
                string(name: 'CUSTOM_BUILD_NAME', defaultValue: "", description: 'Give your build some name to distinguish it from the nameless ones (Optional)'),
                gitParameter(branchFilter: 'origin/(.*)', defaultValue: 'main', name: 'BRANCH', useRepository:'https://github.com/fusionmedialimited/qa-auto-selenoid-test', type: 'PT_BRANCH_TAG', selectedValue: 'DEFAULT', listSize:'0', description: "Specify the branch if needed"),
                choice(name: "SUITE_OR_TEST", choices:['Test Suite', 'Specific Test(s)'], description: "Specify that would you like to run an existing Test Suite or a specific Test"),
                [$class: 'DynamicReferenceParameter',
                 choiceType: 'ET_FORMATTED_HTML',
                 omitValueField: true,
                 name: 'SUITE_TEST',
                 referencedParameters: 'SUITE_OR_TEST, ENVIRONMENT',
                 script: [
                         $class: 'GroovyScript',
                         script: [
                                 classpath: [],
                                 sandbox: true,
                                 script:
                                         """
                                            if(SUITE_OR_TEST.equals('Test Suite')) { 
                                               def html = ''' 
                                                   <p> Suites: <a href="https://inv.atlassian.net/wiki/spaces/QA/pages/532971598/Web+Automation+Test+Suites" target="_blank">(click here to see the suites content)</a></p> 
                                                   <input type="radio" name="value" id="coreRegression" value="run_coreRegression">run_coreRegression<br> 
                                               ''' 
                                               return html 
                                           } else { 
                                               return "<input name=\\"value\\" type=\\"text\\" placeholder=\\"Enter the test tag(s), single or several comma-separated, e.g.: @Equities or @CT-1234, @CT-4567\\" value=\\"\\" style=\\"width: 50%\\">" 
                                           }
                                         """
                         ]
                 ]
                ]
        ])
])

def SUITE, TESTS_TAGS, SELENOID_UI_IP

pipeline {
    agent {label 'docker-slave && eu-node'}
    options {
        ansiColor('xterm')
    }

    stages {
        stage('Pull required docker image') {
            steps {
                script {
                    sh """docker pull browsers/chrome:latest"""
                    sh """docker pull selenoid/video-recorder:latest-release"""
                }
            }
        }

        stage('Git Checkout') {
            steps {
                script {
                    BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].userId}"
                    echo "BUILD_TRIGGER_BY: ${BUILD_TRIGGER_BY}"

                    SELENOID_UI_IP = sh (script: """ip -4 -o addr show eth0 | awk '{print \$4}' | cut -d "/" -f 1""", returnStdout: true).trim()
                }

                // add description to the build
                script {
                    if (!CUSTOM_BUILD_NAME.equals("")) {
                        currentBuild.displayName = "#${env.BUILD_NUMBER} - ${CUSTOM_BUILD_NAME}"
                    }
                    currentBuild.description = "${params.SUITE_OR_TEST}"
                }

                cleanWs()
                git branch: "${params.BRANCH}", credentialsId: 'github-app', url: 'https://github.com/fusionmedialimited/qa-auto-selenoid-test.git'
            }
        }

        stage('Set the run mode') {
            steps {
                // define the SUITE value
                script {
                    if (SUITE_OR_TEST.equals("Specific Test(s)")) {
                        SUITE = "run_dev"
                        // replace commas with 'or' if they're present for the Cucumber runner
                        if (SUITE_TEST.contains(",")) {
                            TESTS_TAGS = SUITE_TEST.replaceAll(",", " or ")
                        } else {
                            TESTS_TAGS = SUITE_TEST
                        }

                        // set the specified Test Tag in DevTestRunner.java to run it as the run_dev suite
                        sh """
                        #!/bin/bash
                        sed -i -e "s/tags =.* /tags = \\"${TESTS_TAGS}\\" \\/\\/ /" src/test/java/testRuns/DevTestRunner.java
                        cat src/test/java/testRuns/DevTestRunner.java
                        """
                    } else {
                        SUITE = "${SUITE_TEST}"
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    if (!getContainerId('mvn-web-test').equals("")) {
                        echo  "\033[34m...Remove the old test container since it's present...\033[0m"
                        deleteContainerById(getContainerId('mvn-web-test'))
                    }

                    if (!getContainerId('selenoid').equals("")) {
                        echo  "\033[34m...Remove the old Selenoid container since it's present...\033[0m"
                        deleteContainerById(getContainerId('selenoid'))
                    }

                    if (!getContainerId('selenoid-ui').equals("")) {
                        echo  "\033[34m...Remove the old Selenoid-UI container since it's present...\033[0m"
                        deleteContainerById(getContainerId('selenoid-ui'))
                    }
                }

                echo "Run params: SUITE=\033[32m${SUITE}"
                echo "\033[34mStarting Docker Compose...\033[0m"
                sh "mkdir -p ./allure-results"
                sh "mkdir -p ./reports"
                sh "BROWSER=chrome TAG=latest SUITE=${SUITE} docker-compose -f docker-compose-web.yml up --force-recreate --build --abort-on-container-exit --exit-code-from webmvntest"
                echo "\033[34mStopping Docker Compose...\033[0m"
                sh 'docker-compose -f docker-compose-web.yml down'
            }
        }
    }

    post {
        cleanup {
            echo 'Cleanup docker staff!'
            sh '''
            if [ -z "$(docker ps -a -q)" ]; then
              echo "Nothing to stop"
            else
              docker stop $(docker ps -a -q)
              docker rm -f $(docker ps -a -q)
            fi
            '''
        }

        always {
            echo "\033[34mPreparing the Cucumber report...\033[0m"
            script {
                archiveArtifacts "reports/Cucumber.json"
                cucumber customCssFiles: '', customJsFiles: '', failedFeaturesNumber: -1, failedScenariosNumber: -1, failedStepsNumber: -1, fileIncludePattern: '**/*.json', jsonReportDirectory: 'reports/', pendingStepsNumber: -1, skippedStepsNumber: -1, sortingMethod: 'ALPHABETICAL', undefinedStepsNumber: -1
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'reports/', reportFiles: '**/*.html', reportName: 'Cucumber Report', reportTitles: 'Cucumber Report'])
            }

            echo "\033[34mPublishing the Allure report...\033[0m"

            script {
                def reportFile = findFiles(glob: 'allure-results/*.*')
                echo "size is: " + reportFile.length

                if (reportFile.length > 0) {
                    allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: 'allure-results']]
                    ])
                } else {
                    echo "[ERROR]: the Allure Report files were not found!"
                }
            }
        }
    }
}


def getContainerId(containerName) {
    return sh(script:'docker ps -aqf "name=^' + containerName + '$" || true', returnStdout: true).trim()
}

def deleteContainerById(containerId) {
    sh(script:'docker stop ' + containerId+ ' &&  docker rm ' + containerId+ ' && echo "container ' + containerId+ ' was removed!" || true', returnStdout: true).trim()
}